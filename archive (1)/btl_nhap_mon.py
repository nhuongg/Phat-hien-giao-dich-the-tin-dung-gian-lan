# -*- coding: utf-8 -*-
"""BTL Nhap mon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ibCyHDv9bMvzPh5pNp3UwixQ1E-uNV7v
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Đọc dữ liệu
data = pd.read_csv("creditcard_balanced_85_15.csv")

# Xem kích thước dữ liệu
print(data.shape)
print(data['Class'].value_counts())

# Biểu đồ tròn (Pie chart) – tỉ lệ gian lận vs hợp lệ
fraud_counts = data['Class'].value_counts()

plt.figure(figsize=(6,6))
plt.pie(fraud_counts, labels=['Hợp lệ (0)', 'Gian lận (1)'],
        autopct='%1.2f%%', startangle=90, colors=['skyblue', 'red'])
plt.title("Tỉ lệ giao dịch hợp lệ vs gian lận")
plt.show()

# Histogram cột Amount
plt.figure(figsize=(8,5))
sns.histplot(data['Amount'], bins=50, kde=False)
plt.title("Phân bố số tiền giao dịch (Amount)")
plt.xlabel("Số tiền")
plt.ylabel("Số lượng")
plt.show()

# Histogram cột Time
plt.figure(figsize=(8,5))
sns.histplot(data['Time'], bins=50, kde=False, color="green")
plt.title("Phân bố thời gian giao dịch (Time)")
plt.xlabel("Thời gian (giây)")
plt.ylabel("Số lượng")
plt.show()

# Boxplot Amount theo nhãn Class
plt.figure(figsize=(8,5))
sns.boxplot(x="Class", y="Amount", data=data, palette=["skyblue", "red"])
plt.title("Boxplot số tiền theo nhãn Class")
plt.xlabel("Class (0 = hợp lệ, 1 = gian lận)")
plt.ylabel("Số tiền")
plt.show()

# Scatter plot giữa V1 và V2
plt.figure(figsize=(8,6))
sns.scatterplot(x="V1", y="V2", hue="Class", data=data,
                palette={0:"blue", 1:"red"}, alpha=0.5)
plt.title("Scatter plot giữa V1 và V2")
plt.xlabel("V1")
plt.ylabel("V2")
plt.legend(title="Class", labels=["Hợp lệ (0)", "Gian lận (1)"])
plt.show()

# --- 1. Import thư viện ---
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, precision_recall_curve, average_precision_score

# Mô hình
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier, plot_tree

# --- 2. Đọc dữ liệu ---
data = pd.read_csv("creditcard_balanced_85_15.csv")
print("Kích thước dữ liệu:", data.shape)
print(data.head())

# --- 3. Tách đặc trưng và nhãn ---
X = data.drop("Class", axis=1)
y = data["Class"]

# --- 4. Chuẩn hóa dữ liệu ---
scaler = StandardScaler()
X[["Time", "Amount"]] = scaler.fit_transform(X[["Time", "Amount"]])

# --- 5. Chia train/test ---
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.15, random_state=42, stratify=y
)

# --- 6. Khởi tạo mô hình ---
models = {
    "Naive Bayes": GaussianNB(),
    "KNN (k=5)": KNeighborsClassifier(n_neighbors=5),
    "Decision Tree": DecisionTreeClassifier(max_depth=5, random_state=42)
}

results = []

# --- 7. Huấn luyện và đánh giá ---
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_prob = model.predict_proba(X_test)[:, 1] if hasattr(model, "predict_proba") else y_pred

    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred)
    rec = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    auc = roc_auc_score(y_test, y_prob)

    results.append([name, acc, prec, rec, f1, auc])

    print(f"\n{name} - Kết quả:")
    print(f"Accuracy: {acc:.4f}")
    print(f"Precision: {prec:.4f}")
    print(f"Recall: {rec:.4f}")
    print(f"F1-score: {f1:.4f}")
    print(f"ROC-AUC: {auc:.4f}")

# --- 8. Xuất bảng kết quả ---
df_results = pd.DataFrame(results, columns=["Mô hình", "Accuracy", "Precision", "Recall", "F1-score", "ROC-AUC"])
print("\n=== Bảng so sánh kết quả ===")
print(df_results)

# --- 9. Vẽ ROC Curve ---
plt.figure(figsize=(8,6))
for name, model in models.items():
    if hasattr(model, "predict_proba"):
        y_prob = model.predict_proba(X_test)[:, 1]
    else:
        y_prob = model.predict(X_test)
    fpr, tpr, _ = roc_curve(y_test, y_prob)
    plt.plot(fpr, tpr, label=f"{name}")

# --- Confusion Matrix cho từng mô hình ---
for name, model in models.items():
    y_pred = model.predict(X_test)
    cm = confusion_matrix(y_test, y_pred)

    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Hợp lệ","Gian lận"])
    disp.plot(cmap="Blues")
    plt.title(f"Confusion Matrix - {name}")
    plt.show()

# --- Precision-Recall Curve ---
plt.figure(figsize=(8,6))
for name, model in models.items():
    if hasattr(model, "predict_proba"):
        y_scores = model.predict_proba(X_test)[:, 1]
    else:
        y_scores = model.predict(X_test)

    precision, recall, _ = precision_recall_curve(y_test, y_scores)
    avg_prec = average_precision_score(y_test, y_scores)
    plt.plot(recall, precision, label=f"{name} (AP={avg_prec:.2f})")

plt.plot([0,1],[0,1],'k--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve các mô hình")
plt.xlabel("Recall")
plt.ylabel("Precision")
plt.title("Precision-Recall Curve các mô hình")
plt.legend()
plt.show()

# Biểu đồ cột so sánh các chỉ số giữa 3 mô hình
df_results.set_index("Mô hình")[["Accuracy","Precision","Recall","F1-score","ROC-AUC"]].plot(
    kind="bar", figsize=(10,6))
plt.title("So sánh các chỉ số giữa các mô hình")
plt.ylabel("Giá trị")
plt.xticks(rotation=0)
plt.legend(loc="lower right")
plt.show()


# --- 10. Vẽ cây quyết định (minh họa cho Decision Tree) ---
dt_model = models["Decision Tree"]
plt.figure(figsize=(12,8))
plot_tree(dt_model, feature_names=X.columns, class_names=["Hợp lệ","Gian lận"], filled=True)
plt.show()